volumes:
  pgdata:

services:
  db:
    image: postgres:17
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: open_experiment
    container_name: db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./create_db.sql:/docker-entrypoint-initdb.d/create_db.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d open_experiment -U postgres']
      interval: 2s
      timeout: 2s
      retries: 20
      start_period: 20s

  db_admin:
    image: adminer
    restart: always
    depends_on:
      - db
    ports:
      - 8080:8080

  #
  # Open Telemetry + Monitoring (jaeger / prometheus)
  #
  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yaml
    command: --config=/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "4318:4318"


  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp" # UDP port for Jaeger agent
      - "16686:16686" # Web UI
      - "14268:14268" # HTTP port for spans

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  #
  # Open Feature + Provider (Flagsmith)
  #
  flagsmith:
    container_name: flagsmith
    image: docker.flagsmith.com/flagsmith/flagsmith:latest
    environment:
      # All environments variables are available here:
      # API: https://docs.flagsmith.com/deployment/locally-api#environment-variables
      # UI: https://docs.flagsmith.com/deployment/locally-frontend#environment-variables

      DATABASE_URL: postgresql://postgres:password@db:5432/flagsmith
      USE_POSTGRES_FOR_ANALYTICS: 'true' # Store API and Flag Analytics data in Postgres
      # set to 'production' in production.
      ENVIRONMENT: dev
      DJANGO_ALLOWED_HOSTS: '*' # Change this in production
      FLAGSMITH_DOMAIN: localhost:8000 # Change this in production
      DJANGO_SECRET_KEY: secret # Change this in production
      # PREVENT_SIGNUP: 'true' # Uncomment to prevent any additional signups
      # ALLOW_REGISTRATION_WITHOUT_INVITE: 'true' # Uncomment and set to false to only allow signups via invitations

      # Enable Task Processor
      TASK_RUN_METHOD: TASK_PROCESSOR # other options are: SYNCHRONOUSLY, SEPARATE_THREAD (default)
      PROMETHEUS_ENABLED: 'true'

      # Uncomment if you want to enable Google OAuth. Note this does not turn Google OAuth on. You still need to use
      # Flagsmith on Flagsmith to enable it - https://docs.flagsmith.com/deployment/#oauth_google
      # DJANGO_SECURE_CROSS_ORIGIN_OPENER_POLICY: 'same-origin-allow-popups'

      # For more info on configuring E-Mails - https://docs.flagsmith.com/deployment/locally-api#environment-variables
      # Example SMTP:
      # EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
      # EMAIL_HOST: mail.example.com
      # SENDER_EMAIL: flagsmith@example.com
      # EMAIL_HOST_USER: flagsmith@example.com
      # EMAIL_HOST_PASSWORD: smtp_account_password
      # EMAIL_PORT: 587 # optional
      # EMAIL_USE_TLS: 'true' # optional
    ports:
      - "8800:8000"
    depends_on:
      db:
        condition: service_healthy

  # The flagsmith_processor service is only needed if TASK_RUN_METHOD set to TASK_PROCESSOR
  # in the application environment
  flagsmith-task-processor:
    container_name: flagsmith-task-processor
    image: docker.flagsmith.com/flagsmith/flagsmith:latest
    environment:
      DATABASE_URL: postgresql://postgres:password@db:5432/flagsmith
      USE_POSTGRES_FOR_ANALYTICS: 'true'
      DJANGO_ALLOWED_HOSTS: '*'
      PROMETHEUS_ENABLED: 'true'
    ports:
      - 8801:8000
    depends_on:
      - flagsmith
    command: run-task-processor


